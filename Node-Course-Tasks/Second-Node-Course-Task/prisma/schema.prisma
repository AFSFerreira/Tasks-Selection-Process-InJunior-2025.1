// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String @id @unique @default(uuid())
  name     String
  email    String @unique
  password String
  image    String

  posts    Post[]
  likes    Like[]
  comments Comment[]

  @@map("users")
}

model Post {
  id        String   @id @unique @default(uuid())
  title     String
  content   String
  createdAt DateTime @default(now())

  userID String
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  likes    Like[]
  comments Comment[]

  @@map("posts")
}

model Comment {
  id        String   @id @unique @default(uuid())
  content   String
  createdAt DateTime @default(now())

  userID String
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  postID String
  post   Post   @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  likes Like[]

  @@map("comments")
}

model Like {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())

  userID String
  user   User   @relation(fields: [userID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  postID String?
  post   Post?   @relation(fields: [postID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  commentID String?
  comment   Comment? @relation(fields: [commentID], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@map("likes")
}
